@startuml

' Nodes
abstract class Node {
    -value: boolean
    +getValue(): boolean
    +{abstract} calculate(): boolean
}
Node --> "0..*" Node : previous >

abstract class NodeComposite {
    +add(Node: child): void
    +remove(Node: child): void
    +getChildren(): List<Node>
}
NodeComposite --> "0..*" Node : children >

' Inputs
class InputNode {
}
NodeComposite <|-- InputNode

class ProbeNode {
}
Node <|-- ProbeNode

' Gates
abstract class Gate {
}
NodeComposite <|-- Gate

class AndGate {
}
Gate <|-- AndGate

class NAndGate {
}
Gate <|-- NAndGate

class OrGate {
}
Gate <|-- OrGate

class NOrGate {
}
Gate <|-- NOrGate

class NotGate {
}
Gate <|-- NotGate

class XOrGate {
}
Gate <|-- XOrGate

' Circuit
class Circuit {
    +simulate(): void
    +addProbe(Node node): Circuit
    +addInput(Node node): Circuit
    +addNode(Node node): Circuit
    +getProbes(): Set<Node>
    +getInputs(): Set<Node>
    +getNodes(): Set<Node>
}
InputNode "1..*" <--* Circuit : inputs <
ProbeNode "1..*" <--* Circuit : probes <
Node "1..*" <--* Circuit : nodes <

' CircuitBuilder
class CircuitBuilder {
    +{abstract} buildNodes(...): void
    +{abstract} buildEdges(...): void
    +reset(String cleanedTxtCircuit): void
    +getCircuit(): Circuit
}

class ANTLRCircuitBuilder {
    +buildNodes(...): void
    +buildEdges(...): void
}
CircuitBuilder <|-- ANTLRCircuitBuilder
ANTLRCircuitBuilder "1" --> ANTLRCircuitParser : parser >

class CircuitBuilderDirector {
    +setCircuitBuilder(CircuitBuilder: circuitBuilder)
    +construct(String: cleanedTxtCircuit): void
}
CircuitBuilder "0..1" <-- CircuitBuilderDirector : builder <

' NodeFactory
class NodeFactory {
}

' CircuitParser
class ANTLRCircuitParser {
    -antlrCircuitParser: ANTLRCircuitParser
    -parseTree: ParseTree
}

' CircuitFileReader
class CircuitFileReader {
}

' Main
class Main {
}

@enduml
